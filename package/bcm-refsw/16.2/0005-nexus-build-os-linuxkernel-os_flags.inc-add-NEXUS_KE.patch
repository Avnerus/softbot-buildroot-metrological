From fdb135deca39b171bf3e9baad53d31d50756cd43 Mon Sep 17 00:00:00 2001
From: Andre McCurdy <armccurdy@gmail.com>
Date: Thu, 12 Nov 2015 15:40:00 -0800
Subject: [PATCH] nexus/build/os/linuxkernel/os_flags.inc: add
 NEXUS_KERNEL_CFLAGS to NEXUS_CFLAGS

Signed-off-by: Andre McCurdy <armccurdy@gmail.com>
---
 nexus/build/os/linuxkernel/os_flags.inc | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/nexus/build/os/linuxkernel/os_flags.inc b/nexus/build/os/linuxkernel/os_flags.inc
index b916347..fdde882 100644
--- a/nexus/build/os/linuxkernel/os_flags.inc
+++ b/nexus/build/os/linuxkernel/os_flags.inc
@@ -171,6 +171,15 @@ NEXUS_KERNEL_CFLAGS += \
         -I$(LINUX)/include/uapi\
         -I$(LINUX_OUT)/include/generated/uapi
 
+# When building code for nexus.ko, it seems that some compiler command lines
+# include both NEXUS_CFLAGS and NEXUS_KERNEL_CFLAGS, but some include
+# NEXUS_CFLAGS only. Not including the kernel include paths means either that
+# kernel headers are not found (ie build failures) or that libc headers may get
+# used instead (ie build succeeds, but unpredictable results at run time...).
+# Unconditionally adding NEXUS_KERNEL_CFLAGS to NEXUS_CFLAGS here is a
+# workaround, but this needs more investigation and maybe a better solution.
+NEXUS_CFLAGS += $(NEXUS_KERNEL_CFLAGS)
+
 # CFLAGS for all files compiled into linuxkernel
 ifeq ($(B_REFSW_DEBUG),y)
 NEXUS_CFLAGS  += $(filter-out -Wundef -mgeneral-regs-only,$(BCM_KBUILD_CFLAGS))
-- 
1.9.1

